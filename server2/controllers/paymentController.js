const Contract = require("../models/Contract");
const Sale = require("../models/Sale");
const Payment = require("../models/Payment");
const User = require("../models/User");
// const { parse, format } = require("date-fns");
// const { az } = require("date-fns/locale");

exports.markMonthAsPaid = async (req, res) => {
  const { contractId, month, amount, method } = req.body;
  const userId = req.user?.userId;

  const monthMap = {
    yanvar: "01",
    fevral: "02",
    mart: "03",
    aprel: "04",
    may: "05",
    iyun: "06",
    iyul: "07",
    avqust: "08",
    sentyabr: "09",
    oktyabr: "10",
    noyabr: "11",
    dekabr: "12",
  };

  function convertToYearMonth(monthString) {
    const [monthName, year] = monthString.toLowerCase().split(" ");
    const monthNumber = monthMap[monthName];
    if (!monthNumber || !year) return null;
    return `${year}-${monthNumber}`;
  }

  try {
    const contract = await Contract.findById(contractId);
    if (!contract)
      return res.status(404).json({ message: "MÃ¼qavilÉ™ tapÄ±lmadÄ±" });

    const scheduleItem = contract.paymentSchedule.find(
      (m) => m.month === month
    );
    if (!scheduleItem)
      return res.status(404).json({ message: "Ay tapÄ±lmadÄ±" });

    if (scheduleItem.paymentId)
      return res.status(400).json({ message: "Bu ay artÄ±q Ã¶dÉ™nilib" });

    const user = await User.findById(contract.subscriberId);
    if (!user)
      return res.status(404).json({ message: "Ä°stifadÉ™Ã§i tapÄ±lmadÄ±" });

    if (!month || typeof month !== "string") {
      return res.status(400).json({ message: "Ay dÉ™yÉ™ri dÃ¼zgÃ¼n deyil." });
    }

    // ğŸ—“ AzÉ™rbaycan ayÄ±nÄ± yyyy-MM formatÄ±na Ã§eviririk
    const formattedMonth = convertToYearMonth(month);
    if (!formattedMonth) {
      return res.status(400).json({ message: "Tarix formatÄ± uyÄŸun deyil." });
    }

    // ğŸ”’ Balans kifayÉ™t etmirsÉ™, Ã¶dÉ™niÅŸ etmÉ™
    if (user.balance < amount) {
      return res.status(400).json({
        message: `Balans kifayÉ™t etmir. MÃ¶vcud balans: ${user.balance} AZN, tÉ™lÉ™b olunan mÉ™blÉ™ÄŸ: ${amount} AZN.`,
      });
    }

    // ğŸ’³ BalansÄ± azaldÄ±rÄ±q
    user.balance -= amount;
    await user.save();

    // ğŸ§¾ Ã–dÉ™niÅŸi yaradÄ±rÄ±q
    const newPayment = await Payment.create({
      contractId,
      months: [formattedMonth],
      amount: amount,
      method: method,
      receivedBy: userId,
      status: "paid",
      paymentType: "monthly",
    });

    // ğŸ“… CÉ™dvÉ™li yenilÉ™yirik
    scheduleItem.paymentId = newPayment._id;
    scheduleItem.status = "paid";

    await contract.save();

    res.json({
      message: `${month} ayÄ± Ã¼Ã§Ã¼n Ã¶dÉ™niÅŸ uÄŸurla balansdan icra olundu`,
      payment: newPayment,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "XÉ™ta: " + err.message });
  }
};

exports.getAllPayments = async (req, res) => {
  try {
    const payments = await Payment.find();

    const detailedPayments = await Promise.all(
      payments.map(async (payment) => {
        const contract = await Contract.findById(payment.contractId).select(
          "contractNumber"
        );
        const user = await User.findById(payment.receivedBy).select(
          "fname lname"
        );

        return {
          ...payment.toObject(),
          contractNumber: contract?.contractNumber || "Yoxdur",
          receivedByName: user ? `${user.fname} ${user.lname}` : "NamÉ™lum",
        };
      })
    );

    res.status(200).json(detailedPayments);
  } catch (error) {
    console.error("Ã–dÉ™niÅŸlÉ™r alÄ±narkÉ™n xÉ™ta:", error);
    res.status(500).json({ message: "Server xÉ™tasÄ±" });
  }
};

exports.getPaymentById = async (req, res) => {
  try {
    const { id } = req.params;

    const payment = await Payment.findById(id).populate(
      "contractId receivedBy"
    );

    if (!payment) {
      return res.status(404).json({ message: "Ã–dÉ™niÅŸ tapÄ±lmadÄ±" });
    }

    // MÃ¼qavilÉ™yÉ™ baÄŸlÄ± istifadÉ™Ã§i mÉ™lumatÄ±nÄ± É™lavÉ™ Ã§É™k
    const contract = await Contract.findById(payment.contractId).populate(
      "subscriberId"
    );
    if (!contract) {
      return res.status(404).json({ message: "MÃ¼qavilÉ™ tapÄ±lmadÄ±" });
    }

    const response = {
      paymentId: payment._id,
      amount: payment.amount,
      method: payment.method,
      type: payment.paymentType, // mÉ™sÉ™lÉ™n: "monthly", "balance", "yearly"
      months: payment.months,
      createdAt: payment.createdAt,
      contractNumber: contract.contractNumber,
      subscriber: {
        id: contract.subscriberId._id,
        fname: contract.subscriberId.fname,
        lname: contract.subscriberId.lname,
        packageName: contract.servicePackageName,
      },
      receivedBy: {
        id: payment.receivedBy?._id,
        fname: payment.receivedBy?.fname,
        lname: payment.receivedBy?.lname,
      },
    };

    res.status(200).json(response);
  } catch (error) {
    console.error("Ã–dÉ™niÅŸ alÄ±narkÉ™n xÉ™ta:", error);
    res.status(500).json({ message: "Server xÉ™tasÄ±" });
  }
};
exports.addBalancePayment = async (req, res) => {
  try {
    const { userId, amount, method } = req.body;

    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "MÉ™blÉ™ÄŸ dÃ¼zgÃ¼n deyil" });
    }

    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "Ä°stifadÉ™Ã§i tapÄ±lmadÄ±" });

    // 1. Ã–dÉ™niÅŸi qeyd edirik
    const newPayment = new Payment({
      contractId: null,
      subscriberId: userId,
      amount,
      paymentType: "balanceTopUp",
      method,
      receivedBy: req.user.userId, // kim tÉ™rÉ™findÉ™n
      description: "Balans artÄ±rma",
    });

    await newPayment.save();

    // 2. BalansÄ± yenilÉ™yirik
    user.balance = (user.balance || 0) + Number(amount);
    await user.save();

    return res.status(200).json({
      success: true,
      message: "Balans uÄŸurla artÄ±rÄ±ldÄ±",
      newBalance: user.balance,
      payment: newPayment,
    });
  } catch (err) {
    console.error("Balans artÄ±rÄ±larkÉ™n xÉ™ta:", err);
    res.status(500).json({ message: "Server xÉ™tasÄ±" });
  }
};
